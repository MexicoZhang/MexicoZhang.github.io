<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1024新的开始</title>
      <link href="/2022/10/24/1024%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/10/24/1024%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年10月24日（P1-P8）"><a href="#2022年10月24日（P1-P8）" class="headerlink" title="2022年10月24日（P1-P8）"></a>2022年10月24日（P1-P8）</h1><h3 id="志行万里者，不中道而辍足！"><a href="#志行万里者，不中道而辍足！" class="headerlink" title="志行万里者，不中道而辍足！"></a>志行万里者，不中道而辍足！</h3><h3 id="今天是1024程序员节，想作为一个新的开始，希望自己能够不忘初心，一直坚持学习并更新下去！"><a href="#今天是1024程序员节，想作为一个新的开始，希望自己能够不忘初心，一直坚持学习并更新下去！" class="headerlink" title="今天是1024程序员节，想作为一个新的开始，希望自己能够不忘初心，一直坚持学习并更新下去！"></a>今天是1024程序员节，想作为一个新的开始，希望自己能够不忘初心，一直坚持学习并更新下去！</h3><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程<br>J2ME (Java2 Micro Edition，Java2平台的微型版)，应用于移动、无线及有限资源的环境;<br>J2SE (Java 2 Standard Edition，Java 2平台的标准版），应用于桌面环境;<br>J2EE (Java 2Enterprise Edition，Java 2平台的企业版)，应用于基于Java的应用服务器<br>Windows+E打开我的电脑</p><h2 id="Java语言的跨平台性"><a href="#Java语言的跨平台性" class="headerlink" title="Java语言的跨平台性"></a>Java语言的跨平台性</h2><p>只要是Java语言来写的程序，依赖于Java虚拟机，就可以在任何平台（操作系统）上运行<br>Java虚拟机不跨平台，只是针对不同的平台版本，有不同版本的虚拟机，Windows版本的虚拟机、Linux版本的虚拟机，Mac版本的虚拟机<br>一次编译到处运行</p><h2 id="DOS操作及命令"><a href="#DOS操作及命令" class="headerlink" title="DOS操作及命令"></a>DOS操作及命令</h2><p>Winwos + X + A<br>任意目录下shift点击右键，打开终端powershell<br>命令<br>dir：查看文件夹中所有的子文件和子文件夹的一些信息<br>cd..：退回上一级目录<br>cd/或者cd\：退回到根目录（盘符）<br>c:(d:)：切换盘符<br>cd+指定目录:跳转到指定目录 跨盘符操作，需要切换盘符，进入该盘符才能进入指定目录<br>cls：清空<br>exit：退出dos</p><h2 id="JDK、JRE与JVM"><a href="#JDK、JRE与JVM" class="headerlink" title="JDK、JRE与JVM"></a>JDK、JRE与JVM</h2><p>JDK、JRE和JVM<br>JDK：Java语言的开发环境，里面包含JRE和开发相关工具包（一些文件夹和应用程序）<br>JRE：Java语言的运行环境，包含JVM和核心类库<br>JVM：Java虚拟机</p><h2 id="第一个程序HelloWorld"><a href="#第一个程序HelloWorld" class="headerlink" title="第一个程序HelloWorld"></a>第一个程序HelloWorld</h2><p>新建HelloWorld.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class HelloWorld&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未配置环境变量时可以将文件放入jdk安装目录的bin目录中<br>编译（.java源文件）javac.exe<br>javac HelloWorld.java<br>运行（.class字节码文件）java.exe<br>java  HelloWorld</p><h2 id="配置环境变量（系统变量）"><a href="#配置环境变量（系统变量）" class="headerlink" title="配置环境变量（系统变量）"></a>配置环境变量（系统变量）</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>JAVA_HOME（JDK安装目录）<br>D:\JDK1.8<br>PATH<br>%JAVA_HOME%\bin</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>PATH（bin目录路径）只配置此项就可以在DOS运行java命令<br>D:\JDK1.8\bin<br>D:\JDK1.8\jre\bin</p><h3 id="自用方法"><a href="#自用方法" class="headerlink" title="自用方法"></a>自用方法</h3><p>CLASSPATH<br>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar<br>JAVA_HOME<br>D:\JDK1.8<br>PATH<br>D:\JDK1.8\bin<br>D:\JDK1.8\jre\bin</p><h1 id="2022年10月24日（P9-P24）"><a href="#2022年10月24日（P9-P24）" class="headerlink" title="2022年10月24日（P9-P24）"></a>2022年10月24日（P9-P24）</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>解释说明，提高阅读性；可以帮助查找错误<br>单行注释：//<br>多行注释：/* <em>/<br>文档注释：/</em>* */<br>单行注释可以嵌套，多行注释不可以嵌套<br>javadoc生成帮助文档</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>Java提供好的一些单词，具有特殊的意义<br>注意：关键字所有字母都是小写；main不是关键字</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>自己起的名字，例如每个程序开始class后的名字<br>main是标识符<br>组成规则：26个大小写英文字母、下划线和美元符号，数字组成的（汉字也可以）<br>注意：数字不能开头；标识符不能和关键字同名</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>永恒不变，不能改变的量<br>分类：字面值常量、自定义常量<br>字面值常量（6种）分为<br>整数常量（1，2，3）<br>小数常量（3.14，1.25）<br>字符常量（必须用单引号括起来，引号里面只能有一个字符’a’,’b’,’1’,’#’,’ ‘（空格也算）,’在’,’’（没有东西不算字符常量））<br>字符串常量（必须用双引号，双引号可以有一个数据、多个数据，也可以没有数据”a”,”ab”,”在吗”,”abc123”,””）<br>布尔常量（只有true和false）、空常量（只有一个值null）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    //输出整数常量</span><br><span class="line">        System.out.println(1);</span><br><span class="line">        System.out.println(2);</span><br><span class="line">        System.out.println(3);</span><br><span class="line">    //输出小数常量</span><br><span class="line">        System.out.println(3.14);</span><br><span class="line">        System.out.println(1.25);</span><br><span class="line">        System.out.println(1.0);</span><br><span class="line">    //输出字符常量</span><br><span class="line">        System.out.println(&#x27;a&#x27;);</span><br><span class="line">        System.out.println(&#x27;$&#x27;);</span><br><span class="line">        System.out.println(&#x27;在&#x27;);</span><br><span class="line">//        System.out.println(&#x27;在吗&#x27;);错误的</span><br><span class="line">//        System.out.println(&#x27;abc&#x27;);错误的</span><br><span class="line">//        System.out.println(&#x27;&#x27;);错误的</span><br><span class="line">    //输出字符串常量</span><br><span class="line">        System.out.println(&quot;a&quot;);</span><br><span class="line">        System.out.println(&quot;abc&quot;);</span><br><span class="line">        System.out.println(&quot;123&quot;);</span><br><span class="line">        System.out.println(&quot;在吗&quot;);</span><br><span class="line">        System.out.println(&quot;&quot;);</span><br><span class="line">    //输出布尔常量</span><br><span class="line">        System.out.println(true);</span><br><span class="line">        System.out.println(false);</span><br><span class="line">    //输出空常量</span><br><span class="line">    //System.out.println(null);</span><br><span class="line">    //空常量不能放入输出语句里面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><p>分类：十进制、二进制、八进制、十六进制<br>十进制：正常写例如12、5、123<br>二进制：0b例如0b10<br>八进制：0例如010<br>十六进制：0x例如0x10<br>计算机中的数据都会变成二进制，由多个1或者多个0组成，每个1或者0称为1个位，也叫1bit<br>在计算机中进行存储和运算的最小单位是字节（byte）<br>1byte=8bit,1KB=1024byte,1MB=1024KB<br>进制转换 8421快速转换<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/8421.bmp" alt="8421"><br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/8421(1).bmp" alt="8421"><br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/8421(2).bmp" alt="8421"></p><h2 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h2><p>计算机在对数据运算的原理，例如3-2，可以看出3+(-2)<br>先将3这个十进制，变成二进制的原码形式，然后变成反码形式，最后变成补码形式<br>先将-2这个十进制，变成二进制的原码形式，然后变成反码形式，最后变成补码形式<br>将这两个数二进制的补码形式参与运算会得到一个二进制补码形式<br>最后将二进制的补码形式变回二进制的原码形式，再变成十进制，得到1<br>正数的原码、反码和补码的转换规则<br>正数的原码、反码和补码是一样的<br>负数的原码、反码和补码的转换规则<br>负数的原码变反码，符号位不变，其余的0变1，1变0<br>负数的反码变补码，只需要加1<br>符号位：二进制的最左边的那一个位；正数的符号位是0，负数的符号位是1<br>3-2=1<br>3<br>00000011二进制的原码形式<br>00000011二进制的反码形式<br>00000011二进制的补码形式<br>-2<br>10000010二进制的原码形式<br>11111101二进制的反码形式<br>11111110二进制的补码形式<br>加法运算00000011+11111110=100000001（超出的位不要了也就是00000001）（二进制补码形式）<br>因为正数的反码补码原码一样所以<br>00000001二进制的反码形式<br>00000001二进制的原码形式<br>二进制转换十进制结果1</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在一定范围内，可以发生变化的量<br>定义格式<br>格式一：直接定义<br>数据类型 变量名（标识符） = 数据；int a = 12；<br>格式二：间接定义<br>数据类型 变量名；int i;<br>变量名 = 数据；i = 2;<br>int i = 12;运行的时候，内存做了什么？<br>在内存中会开辟一块内存空间，该空间的名字就是我们起的变量名，空间中存储的数据的数据类型就是我们给的int类型，空间中存储的数据就是给的12，再次赋值i=13时，还是在同一空间<br>注意：<br>1.给float类型变量赋值的时候，要在数据的后面加上F或者f<br>2.给long类型变量赋值的时候，建议在后面加上L和l<br>Long l = 12000000000;会报错，需要在后面加个L<br>3.当我们想要使用某个变量的时候，一定要先赋值，再使用，不然会报错<br>4.给某个变量赋值的时候，要考虑该变量的范围，不然会报错int i = 3.14;byte b = 130;<br>5.在同一对花括号内，不能定义同名变量（在一块内存空间内，不能有同名的空间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    //定义一个byte类型的变量</span><br><span class="line">    byte a = 12;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    //定义一个short类型的变量</span><br><span class="line">    short b;</span><br><span class="line">    b = 13;</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    //定义一个int类型的变量</span><br><span class="line">    int c = 1;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    //定义一个long类型的变量</span><br><span class="line">    long d = 2;</span><br><span class="line">    System.out.println(d);</span><br><span class="line">    //定义一个float类型的变量</span><br><span class="line">    float e = 3.14F;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    float ff = 1.0F;</span><br><span class="line">    float fff = 1;</span><br><span class="line">    System.out.println(ff);//输出1.0</span><br><span class="line">    System.out.println(fff);//输出1.0</span><br><span class="line">    //定义一个double类型的变量</span><br><span class="line">    double f = 3.14;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">    //定义一个char类型的变量</span><br><span class="line">    char g = &#x27;a&#x27;;</span><br><span class="line">    System.out.println(g);</span><br><span class="line">    //定义一个boolean类型的变量</span><br><span class="line">    boolean h = true;</span><br><span class="line">    boolean i = false;</span><br><span class="line">    System.out.println(h);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java中数据类型分类：2大类4小类8小种<br>2大类：基本数据类型（4类8种）、引用数据类型<br>基本数据类型：<br>整型：byte（1个字节） short（2个字节） int（4个字节） long（8个字节）<br>一个正数，默认的数据类型是int<br>浮点型：float（4个字节） double（8个字节）<br>一个小数,默认的数据类型是double<br>float e = 3.14F;大的装到小的里面需要强制声明下<br>字符型：char（2个字节）<br>布尔型：boolean（1个字节）<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/leixing.bmp" alt="数据类型"></p><h1 id="2022年12月16日（P24-P33）"><a href="#2022年12月16日（P24-P33）" class="headerlink" title="2022年12月16日（P24-P33）"></a>2022年12月16日（P24-P33）</h1><p>java中数据类型转换的顺序 按照范围从小到大：<br>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double<br>高精度的数据不可以赋值给低精度的数据<br>float a = 1.19;   1.19后面没有f（或F）编译器会默认为double类型，不符合高精度的数据不能赋值给低精度的数据的原则，所以是错的。<br>float b = 520;    是整型数据赋值给浮点型数据，明显的低精度赋值给高精度，正确的的。</p><h2 id="数据类型之间的转换"><a href="#数据类型之间的转换" class="headerlink" title="数据类型之间的转换"></a>数据类型之间的转换</h2><p>隐式类型转换：小的数据类型会自动提升为大的数据类型<br>byte b = 1;<br>short s = 2;<br>int i = 3;<br>long l = 4;<br>float f =  3.14f;<br>double d = 3.14;<br>double(数据类型) dd（变量）= b + s + i + f + d;<br>float dd = b  + s + i + f + d; （报错）<br>double i = 1;(输出1.0      1是小数据，double大，小数据会提升)<br>int a = 3.14（不行，3.14不管是float还是double都比整形大）<br>当多个数据类型参与运算的时候，小的数据类型会自动提升为大的数据类型<br>注意：boolean类型不能和其它数据类型相互转换（char可以，比较特殊）</p><p>常见考试题？</p><pre><code>情况一：   byte b1 = 1;   byte b2 = 2;   byte b3 = b1 + b2;//b1+b2处报错   System.out.println(b3);//编译报错   编译时不知道b1是1，b2是2，因为b1和b2是变量，他们的值会发生变化，相加以后的值也不确定，   而他们相加以后的值可能没有超过byte范围，也有可能超过了byte范围，这种可能与不可能摸棱两可的情况下   报错！！！byte b3 =byte(b1 + b2);不管超没超，都强转，绝对不会有问题   short s1 = 1;   short s2 = 2;   short s3 = s1 + s2;   System.out.println(s3);//编译报错   byte b1 = 1;   byte b2 = b1 + 2;//b1还是变量，+2之后不知道大于byte还是不大于byte ，逻辑报错   System.out.println(b2);//编译报错      short s1 = 1;   short s2 = s1 + 2;   System.out.println(s2);//编译报错   结论：针对byte类型和short类型的时候，只要右边有一个是变量，都会编译报错情况三：    byte b = 126 + 1;    System.out.println(b);//编译正确127    情况四：    byte b = 127 + 1;    System.out.println(b);//编译报错，因为byte范围最大值是127    两个常量超了就报错，不超就不报，变量不管超不超直接报错    其它情况：   int i1 = 1；   int i2 = 2;   int i3 = i1 + i2;   System.out.println(i3);//输出3   int作为分界线，比int大的long不报错，但是byte和short报错，一个整数常量，默认就是int，相加超过了int的范围就报错，不超过就不报错，   而且编译时始终不报错，但是最后会通过强制转换变成负数</code></pre><p>强制类型转换：指大的数据类型被强制转换成小的数据类型<br>强制类型转换格式：<br>小的数据类型  小的数据类型的变量名 = （小的数据类型）大的数据类型的变量名；<br>举例：</p><pre><code>int i = 130;byte b = (byte)i;</code></pre><p>注意：尽量不要使用强制转换，会有问题</p><pre><code>int i = 130;byte b = (byte)i;System.out.println(b);//-126</code></pre><p>130二进制原码00000000 00000000 00000000 100000010 最左边符号位<br>二进制反码00000000 00000000 00000000 100000010<br>二进制补码00000000 00000000 00000000 100000010<br>强转为byte 四个字节变成一个字节 将补码形式砍调<br>100000010 二进制的补码形式<br>100000001 二进制的反码形式（除去符号位，其余的0变1，1变0）<br>111111110 二进制的源码形式<br>-126 十进制</p><p>ASCII编码表<br>//程序执行的入口,一个程序想要执行，从这里面自上而下执行</p><pre><code>public static void main (String[] args)&#123;char c = &#39;1&#39;;//可以与刚才六个数据类型进行数据转换int i = 1;int a = i + c; //int比char要大，所以此处的数据类型为int，小的会变成大的System.out.println(a);//98&#125;</code></pre><p>‘a’ —&gt; 97<br>‘A’ —&gt; 65<br>‘0’ —&gt; 48<br>System.out.println(‘ ‘+0);//32<br>System.out.println(‘约’+0);//32422</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算术运算符<br>+：<br>在java中+号的含义：<br>1：加减乘除的加<br>2：正负的正 int i = +5;<br>3：连接符<br>什么时候作为连接符：当任意数据类型的数据与字符串相连接的时候，那个+号就是连接符<br>System.out.println(1 + “abc”);//1adc     System.out.println(“abc”+1);//adc1<br>System.out.println(true + “abc”);//trueabc      System.out.println(‘a’ + “abc”);//aabc<br>-：和数学中一样<br>*：同上<br>/：</p><pre><code>int　i　=　4；int  j  =  2;int a = i/j;System.out.println(a);//2int　i　=　5；int  j  =  2;int a = i/j;System.out.println(a);//2整数除以整数得到的还是整数，不会四舍五入int　i　=　5；int  j  =  2;double a = i/j;System.out.println(a);//2.0double i = 5;//int i = 5;int j = 2;//double j = 2;double a = i/j;System.out.println(a);//2.5  double类型除以整型，由于自动类型提升，整型会变为double类型，最终得到也是double类型</code></pre><p>%:<br>模，取余，可以用此判断奇偶数</p><pre><code>int　i　=　3；int  j  =  2;System.out.println(i % j);//1int　i　=　2；int  j  =  3;System.out.println(i % j);//2int　i　=　4；int  j  =  2;System.out.println(i % j);//0</code></pre><p>++：<br>单独使用，没有参与运算：</p><pre><code>        int i=1;        i++;//i = i + 1；        System.out.println(i);//2        int i;        ++i;//i = i + 1；        System.out.println(i);//2        不管++在前还是在后，结果都一样        参与运算：        int i=1;        int j = i++;        System.out.println(j);//1        System.out.println(i);//2        ++在后：先参与运算，然后再自身加1                int i=1;        int j = ++i;        System.out.println(j);//2        System.out.println(i);//2        ++在前：先自身加1，然后再参与运算        面试题：        byte b1 = 1;        b1 = b1 +1;//b1是变量，加一之后不知道有没有超过byte范围，所以报错        System.out.println(b1);//编译报错                byte b1 = 1;        b1++；//b1=b1+1  ++里面自带强制类型转换，b1=(byte)(b1+1);        System.out.println(b1);//2正确</code></pre><p>–：<br>单独使用，没有参与运算：</p><pre><code>        int i=2;        i--;//i = i - 1；        System.out.println(i);//1        int i=2;        --i;//i = i - 1；        System.out.println(i);//1        不管--在前还是在后，结果都一样        参与运算：        int i=2;        int j = i--;        System.out.println(j);//2        System.out.println(i);//1        --在后：先参与运算，然后再自身减1                int i=2;        int j = --i;        System.out.println(j);//1        System.out.println(i);//1        --在前：先自身减1，然后再参与运算练习题：        int i = 10;        int j = i++ + ++i + i-- + --i;        System.out.println(j);//44    解释：int a = i++;//a=10,i=11          int b = ++i;//i=12,b=12          int c = i--;//c=12,i=11          int d = --i;//i=10,d=10          int j = a + b + c + d;//j=10+12+12+10=44</code></pre><p>赋值运算符：<br>=：</p><pre><code>    int i = 1;//赋值    +=：    int i = 1;    i += 2;//i = i + 2    System.out.println(i);//3    byte b = 1;    b += 2;//b = (byte)(b + 2)自带强制类型转换    System.out.println(b);//3</code></pre><p>-=同上<br>*=同上<br>/=同上<br>%=同上<br>        注意：都自带了强制类型转换<br>关系（比较）运算符：<br>关系运算符得出来的结果一定是boolean类型的数据，也就是说要么是true，要么是false<br>    &gt;:</p><pre><code>int i = 1;int j = 2;System.out.println(i &gt; j);//falseint i = 3;int j = 2;System.out.println(i &gt; j);//true</code></pre><p>&lt;,&gt;=,&lt;=,!= ,==    </p>]]></content>
      
      
      <categories>
          
          <category> 编程课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西藏之旅</title>
      <link href="/2022/10/17/%E8%A5%BF%E8%97%8F%E4%B9%8B%E6%97%85/"/>
      <url>/2022/10/17/%E8%A5%BF%E8%97%8F%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次记录2022年10月17日"><a href="#第一次记录2022年10月17日" class="headerlink" title="第一次记录2022年10月17日"></a>第一次记录2022年10月17日</h1><h2 id="一、缘由"><a href="#一、缘由" class="headerlink" title="一、缘由"></a>一、缘由</h2><p>在学校时，起初听到西部计划的时候是没有想过的，在此之前的实习是在成都四方伟业做过大数据实施工作，实习结束之后就去了师哥的那家校企合作公司，如今回头来看，其实都是可以的，只是选择罢了。<br>大数据部署工作分手动和脚本自动，没有啥技术含量，当时练习了一周就开始接触项目，其实最简单的就是页面的二次开发，公司有一套自己的流程，从后台到UI设计都是有专人负责，但是往往一个人手里有很多项目，我当时除了日常实习学习的工作，还需要负责深圳的风景页面展示界面，之后让我去驻马店和啥地方来着，就是因为需要到处出差，所以结束实习之后也没有转正，因为这个，公司还找我要违约金，不交违约金就不给实习的工资，当然最后沟通之后还是没有要违约金还给了实习的工资。在此也需要感谢公司的HRBP，感谢她的理解，在公司也学习到了很多，我也知道公司让我去项目地也是为了更好的带我，可惜当时真的不想一周在山东某个城市一周在驻马店这种。<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/xibu2.bmp" alt="标语"><br>师哥创建的公司主要是校企合作、系统集成，面试我的当时是另一个师哥，这家公司也是我喜欢的类型，如果不是因为当时听到西部计划，也许我会一直留在这，还能经常回母校去看看，印象最深的就是导员的办公室在三楼，我的在四楼，临近毕业的时候还去给大一的监考，属实过足了瘾，进入学校也是通行证直接就是“驻校教师”,现在看，害羞，哈哈哈，在学校做了接近一个月的技术运营，因为加入的晚，所以只参与了新校区豁然楼的计算机教室和录播教室收尾和文档的编写，当时写到联系方式张老师，还是有点不适应，不过能够以这种方式留在学校，也是一种幸运吧，其实早期想的是直接二战考研……后来师哥就让我去了济南，跟项目，从聊城大学到公司自主项目，虽然时隔几个月，我也深深感觉到项目的那一个月是我接触最多的一个月，从了解整个机房布局，到服务器上架，调试，网络分配，交换机、路由器调试，见过了各种厂商，也学到了很多，科华、华三、锐捷、奥易云、深信服……再到后来公司的大数据展屏等等，总感觉一天很充实，我也一度以为这就是我喜欢的，毕竟当时找软件开发没通过，只能从技术运营开始，这也是不错的起点，直到那天学校打来的电话……<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/work.bmp" alt="豁然楼"><br>西部计划，一项就业政策？为理想？当时我知道我的服务地是西藏的时候，我也不知道该不该去，毕竟人们的印象就是高海拔、缺氧、对身体不好等等，但是经过一些短暂的纠结我还是来了，只为谋求一个机会，是啊，人们总是这样，有时一个机会就足以了，尽管它很渺茫。<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/xibu.bmp" alt="西部计划宣传语"></p><h2 id="二、西藏之旅"><a href="#二、西藏之旅" class="headerlink" title="二、西藏之旅"></a>二、西藏之旅</h2><p>   虽然旅途历经两天时间，但是在拉萨进行培训的日子还是值得怀念的，我之前经常跟他们说我们的大学是从听着消愁开始，听着入海结束，这次是国际歌，随后我就到了这次目的地青稞之乡————日喀则，不过到这两天之后就投入了疫情防控的工作之中……<br><a href="https://www.bilibili.com/video/BV1Qe4y1j77M/">国际歌合唱</a></p><h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2><p>   起初不想写这个，但是以后还会不断完善这一章的内容，想要多记录一些东西，西部计划1-3年，我也不知道会写多少，也许会很多吧…..<br>   第一次截至日2022年10月17日</p><h1 id="第二次记录2022年10月19日"><a href="#第二次记录2022年10月19日" class="headerlink" title="第二次记录2022年10月19日"></a>第二次记录2022年10月19日</h1><h2 id="住房"><a href="#住房" class="headerlink" title="住房"></a>住房</h2><p>在拉萨进行培训一星期之后就来到了日喀则，这里是山东对口援藏城市，一些道路和建筑也是各个省份援建，例如:山东路由山东援建，吉林路由吉林援建，上海路由上海援藏……这里的居民建筑也是非常有特色，门口悬挂的类似窗帘材质的布说是一年一换，且几乎每家的高处都会挂着经旗，风吹过一遍相当于读了一遍，他们是这样解释的。<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/jingqi.bmp" alt="经旗"></p><h2 id="藏药"><a href="#藏药" class="headerlink" title="藏药"></a>藏药</h2><p>来到这里最惊奇的就是藏药，一开始有人告诉我这里的藏药多么多么神奇，内心一开始是不太接受的，但是随着医生不断地来社区，看到他们都在使用藏药，这也逐渐改变了我的认知，毕竟这里也有藏医院，应该和内地的中医院一样，藏医与中医也应该是同等地位。<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/zangyao.bmp" alt="藏药"></p><h1 id="第三次记录2022年12月16日"><a href="#第三次记录2022年12月16日" class="headerlink" title="第三次记录2022年12月16日"></a>第三次记录2022年12月16日</h1><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>以青春之我、奋斗之我，为民族复兴铺路架桥，为祖国建设添砖加瓦想到一开始来西部计划的初衷，这不禁让人犹豫，援藏研究生亦或者考编考研？如今在社区经过三个月之后，认识到了西部计划只是过程，这个过程可长可短，虽然一再强调过程的重要性，但现在的我更倾向于结果，时间带来的改变太多了，三个月，没有假期，没有周末，全天待命，这是和我一开始的畅想是不一样的，工作时间六小时制，没有过，双休，没有过，有时候不禁感叹，还不如在公司更加轻松，即使有时候需要加班，但总归有始有终，但看到村民对自己的期待，也确实想要给他们做一些事情，现在无奈向现实低头，也许这也是一种小资思想吧。想来之前做决定带来的几次转变，每次都不太尽如人意，从一开始的实习，虽然累但报酬还可以，因为出差距离远时间长放弃了，转而进入另一家公司，在公司第一感觉是自己喜欢的，但时间一久又来了西部计划，人总是这样，新鲜感消磨殆尽之后就换另一份充满新鲜感的工作。志愿者的工作是有意义的，但却不能够长久，因为志愿者身份，很多工作都要被迫接受，也有人说志愿者志愿者，就是凭个人意愿，想做就做，但一旦加入了这个队伍，也不是想停就停的，终归要有始有终。如今的我也开始抱怨志愿者这一身份的缺点，已经不顾当时的初心，因此记录此次，希望自己能够坚持，不忘坚持，有始有终！</p>]]></content>
      
      
      <categories>
          
          <category> 西部计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西部计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zTree的使用方法</title>
      <link href="/2022/07/01/zTree%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/01/zTree%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、zTree介绍"><a href="#一、zTree介绍" class="headerlink" title="一、zTree介绍"></a>一、zTree介绍</h1><p><a href="https://treejs.cn/v3/main.php#_zTreeInfo">下载地址</a></p><h2 id="（一）简介"><a href="#（一）简介" class="headerlink" title="（一）简介"></a>（一）简介</h2><p>zTree 是一个依靠 jQuery 实现的多功能 “树插件”。优异的性能、灵活的配置、多种功能的组合是 zTree 最大优点。</p><h2 id="（二）特点"><a href="#（二）特点" class="headerlink" title="（二）特点"></a>（二）特点</h2><p>1、zTree 是开源免费的软件, 使用 MIT 许可证。<br>2、(zTree v3.x 将核心代码按照功能进行了分割，不需要的代码可以不用加载。<br>3、采用了 延迟加载 技术，上万节点轻松加载，即使在 IE6 下也能基本做到秒杀。<br>4、兼容 IE、FireFox?、Chrome、Opera、Safari 等浏览器。<br>5、支持 JSON 数据。<br>6、支持静态 和 Ajax 异步加载节点数据。<br>7、支持任意更换皮肤 / 自定义图标。<br>8、支持极其灵活的 checkbox 或 radio 选择功能。<br>9、提供多种事件响应回调。<br>10、灵活的编辑（增/删/改/查）功能，可随意拖拽节点，还可以多节点拖拽。<br>11、在一个页面内可同时生成多个 Tree 实例。<br>12、简单的参数配置实现 灵活多变的功能。<br>13、zTree v3.x（JQuery Tree 插件），性能全面提升，js &amp; css 架构全面调整，提供更好的兼容性和易开发性。</p><hr>]]></content>
      
      
      <categories>
          
          <category> zTree </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生选宿舍系统（链接已失效）</title>
      <link href="/2022/05/10/%E6%96%B0%E7%94%9F%E9%80%89%E5%AE%BF%E8%88%8D%E7%B3%BB%E7%BB%9F(%E5%B7%B2%E4%BD%9C%E5%BA%9F)/"/>
      <url>/2022/05/10/%E6%96%B0%E7%94%9F%E9%80%89%E5%AE%BF%E8%88%8D%E7%B3%BB%E7%BB%9F(%E5%B7%B2%E4%BD%9C%E5%BA%9F)/</url>
      
        <content type="html"><![CDATA[<h1 id="新生选宿舍系统（服务器已欠费过期）"><a href="#新生选宿舍系统（服务器已欠费过期）" class="headerlink" title="新生选宿舍系统（服务器已欠费过期）"></a><a href="http://110.42.129.249:8080/web/page/login.html">新生选宿舍系统（服务器已欠费过期）</a></h1>]]></content>
      
      
      <categories>
          
          <category> 毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring概述与环境配置</title>
      <link href="/2022/01/22/Spring(1)%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%85%A5%E9%97%A8/"/>
      <url>/2022/01/22/Spring(1)%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring框架"><a href="#一、Spring框架" class="headerlink" title="一、Spring框架"></a>一、Spring框架</h1><h2 id="（一）Spring框架概述"><a href="#（一）Spring框架概述" class="headerlink" title="（一）Spring框架概述"></a>（一）Spring框架概述</h2><p> 1、Spring 是轻量级的开源的 JavaEE 框架<br> （1）轻量级：jar包少、体量小、用spring过程中不需要引入其他的组件，自己可以直接使用<br> （2）开源：免费提供源代码<br> （3）框架：开放更加方便，代码更加简洁<br> 2、Spring 可以解决企业应用开发的复杂性<br> 3、Spring 有两个核心部分:IOC 和 Aop<br> （1）IOC：控制反转，把创建对象过程交给 Spring 进行管理<br> （2）Aop：面向切面，不修改源代码进行功能增强</p><h2 id="（二）Spring-特点"><a href="#（二）Spring-特点" class="headerlink" title="（二）Spring 特点"></a>（二）Spring 特点</h2><p> （1）方便解耦，简化开发<br> （2） Aop 编程支持<br> （3）方便程序测试(Junit4)<br> （4）方便和其他框架进行整合<br> （5）方便进行事务操作<br> （6）降低 API 开发难度</p><h1 id="二、Spring下载"><a href="#二、Spring下载" class="headerlink" title="二、Spring下载"></a>二、Spring下载</h1><h2 id="（一）下载地址"><a href="#（一）下载地址" class="headerlink" title="（一）下载地址"></a>（一）<a href="https://repo.spring.io/ui/native/release/org/springframework/spring">下载地址</a></h2><p> 注：选择最新release稳定版本<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/Spring5download.bmp" alt="选择最新release稳定版本"><br> 解压后可看到都是由RELEASE，java-doc,sources三个构成，分别为jar包、文档、源代码<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/spring5file.bmp" alt="解压后目录中"><br> 如果使用Spring5的基本功能，则需要4个jar包，也就是Core Container 中的beans与core对应ioc、上下文、表达式<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/Spring5mokuai.bmp" alt="Spring5模块"><br> commons-logging-1.1.1日志的包也需要，所以总共如下5个包<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/spring5packet.bmp" alt="Spring5基本包"><br> 在idea中创建java项目并导入5个jar包</p><h2 id="（二）idea中创建spring项目"><a href="#（二）idea中创建spring项目" class="headerlink" title="（二）idea中创建spring项目"></a>（二）idea中创建spring项目</h2><p><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/ideaspring5.bmp" alt="idea创建spring项目"><br> src下创建普通类，在这个类里创建普通方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.atzhang.spring5;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    public void add()&#123;</span><br><span class="line">        System.out.println(&quot;add....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> src下创建Spring配置文件，在配置文件配置创建的对象（class路径，id名字）<br><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/ideaspring2.bmp" alt="创建xml配置文件"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">&lt;!--配置User对象创建--&gt;</span><br><span class="line">    &lt;bean id=&quot;user&quot; class=&quot;com.atzhang.spring5.User&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="（三）最终进行测试"><a href="#（三）最终进行测试" class="headerlink" title="（三）最终进行测试"></a>（三）最终进行测试</h2><p><img src="https://cdn.jsdelivr.net/gh/MexicoZhang/PicGo/img/ceshi.bmp" alt="测试结果"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.atzhang.spring5.testdemo;</span><br><span class="line"></span><br><span class="line">import com.atzhang.spring5.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class TestSpring &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void testadd()&#123;</span><br><span class="line">        //加载spring配置文件</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);</span><br><span class="line">        //获取配置创建得对象</span><br><span class="line">        User user = context.getBean(&quot;user&quot;, User.class);</span><br><span class="line">        System.out.println(user);//输出地址</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/30/hello-world/"/>
      <url>/2021/12/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
